sudo: required  # workaround to prevent running out of memory

language: android

env:
  global:
    - FIRST_EMULATOR_API_LEVEL=10
    - SECOND_EMULATOR_API_LEVEL=21
    # switch glibc to a memory conserving mode
    - MALLOC_ARENA_MAX=2
    - GRADLE_OPTS='-Dorg.gradle.jvmargs="-Xmx1000m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError"'
    # wait 5 minutes for adb to connect to emulator. Travis-ci cancels a
    # stalled build after 10 minutes, so this should be shorter than that so
    # there is time for the build to report the error.
    - ADB_INSTALL_TIMEOUT=5

jdk:
  # the release build infrastructure uses OpenJDK from Debian
  - openjdk7
  # build against only one JDK for now, to get stable builds
  # many developers use the Oracle JDK
  #- oraclejdk8
  #- oraclejdk7

#
before_cache:
  - rm -f $HOME/.gradle/caches/modules-2/modules-2.lock
cache:
  directories:
    - $HOME/.gradle/caches/
    - $HOME/.gradle/wrapper/

# workaround for buffer overflow issue
# https://github.com/travis-ci/travis-ci/issues/5227
before_install:
  - cat /etc/hosts # optionally check the content *before*
  - sudo hostname "$(hostname | cut -c1-63)"
  - sed -e "s/^\\(127\\.0\\.0\\.1.*\\)/\\1 $(hostname | cut -c1-63)/" /etc/hosts | sudo tee /etc/hosts
  - cat /etc/hosts # optionally check the content *after*

android:
  components:
    - tools
    - platform-tools
    - build-tools-23.0.2
    - extra-android-m2repository
    - android-22
    - android-$FIRST_EMULATOR_API_LEVEL
    - sys-img-armeabi-v7a-android-$FIRST_EMULATOR_API_LEVEL
    - android-$SECOND_EMULATOR_API_LEVEL
    - sys-img-armeabi-v7a-android-$SECOND_EMULATOR_API_LEVEL
  licenses:
    # only approve the non-Google licenses
    - 'android-sdk-preview-license-52d11cd2'
    - 'android-sdk-license-.+'

script:
  # run release build script
  - ./make-release-build
  # clean up to start the gradle build from fresh git
  - git clean -fdx
  - git reset --hard
  # 'assemble' everything and run all checks that do not require a device/emulator
  - ./gradlew build -PdisablePreDex
  # start the emulator after the build to conserve memory
  - echo no | android create avd --force -n test -t android-$FIRST_EMULATOR_API_LEVEL
  - emulator -avd test -no-skin -no-audio -no-window &
  - android-wait-for-emulator
  - adb shell input keyevent 82 &
  # now run the tests that require a device/emulator
  - ./gradlew connectedCheck -PdisablePreDex
  - echo "get the full logcat here:";
  - adb -e logcat -d | curl --silent -F 'clbin=<-' https://clbin.com;

  # kill any running emulator
  - ps -ef | grep '[e]mulator'
  - kill `ps -ef | grep '[e]mulator' | awk {'print$2'}`

  # now run the second emulator
  - echo no | android create avd --force -n test -t android-$SECOND_EMULATOR_API_LEVEL
  - emulator -avd test -no-skin -no-audio -no-window &
  - android-wait-for-emulator
  - adb shell input keyevent 82 &
  # install Orbot to test against
  - curl --silent https://guardianproject.info/fdroid/repo/Orbot-v15.1.2.apk > orbot.apk
  - adb -e install -r orbot.apk
  # temp workaround: start Orbot manually, it has a bug that is preventing auto-start
  - adb shell am broadcast -a org.torproject.android.intent.action.START -n org.torproject.android/.service.StartTorReceiver
  - sleep 5
  # now run the tests that require a device/emulator
  - ./gradlew connectedCheck -PdisablePreDex

after_failure:
  - find * -name lint-results.xml | xargs cat
  - adb -e logcat -d '*:E';
  - echo "get the full logcat here:";
  - adb -e logcat -d | curl --silent -F 'clbin=<-' https://clbin.com;
